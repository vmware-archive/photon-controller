# Copyright 2015 VMware, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.  You may obtain a copy
# of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, without
# warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
# License for then specific language governing permissions and limitations
# under the License.

"""Common helper functions to test the agent code"""

import logging
import os
import subprocess
import threading
import time
import uuid

from common.file_util import mkdir_p
from common.photon_thrift.direct_client import DirectClient
from gen.agent import AgentControl
from gen.host import Host
from thrift.transport import TTransport

logger = logging.getLogger(__name__)
CLEAN = "clean"
INSTALL = "install"
WAIT = 20
SLEEP_STEP = 3


class RuntimeUtils(object):

    CLOUD_STORE = "cloud-store"

    # Base directory to put all the files generated by the runtime util.
    BASE_DIR = "/tmp/photon-controller-python"

    # All the files for a given run goes to
    # /tmp/photon-controller-python/$RUNTIME_ID
    RUNTIME_ID = str(uuid.uuid4())

    def __init__(self):
        self.test_dir = os.path.join(self.BASE_DIR, self.RUNTIME_ID)
        mkdir_p(self.test_dir)
        self.agent_procs = []
        self.root_procs = []
        self.thrift_procs = []

    def cleanup(self):
        # Stop all started agents
        for agent in self.agent_procs:
            try:
                self.stop_agent(agent)
            except:
                pass

    def _configure_logging(self, config, service_name):
        filename = os.path.join(self.test_dir, "%s.log" % service_name)
        logging_config = {}
        logging_config['logging'] = {}
        logging_config['logging']['console'] = {}
        logging_config['logging']['console']['enabled'] = False
        logging_config['logging']['file'] = {}
        logging_config['logging']['file']['archive'] = False
        logging_config['logging']['file']['enabled'] = True
        logging_config['logging']['file']['currentLogFilename'] = filename
        config.update(logging_config)

    def start_agent(self, config):
        """
        config - Use get_default_agent_config() to get the default config, and
                 modify the dict as needed.
        """
        address = config["--hostname"]
        port = int(config["--port"])
        mkdir_p(config["--config-path"])
        arg_list = ["photon-controller-agent"]
        for (key, val) in config.items():
            arg_list.append(key)
            if val:
                arg_list.append(val)

        # Keeping track of what is created for clean up purposes
        agent_client = DirectClient("Host", Host.Client, address, port)
        control_client = DirectClient("AgentControl", AgentControl.Client,
                                      address, port)
        try:
            agent_client.connect()
            agent_client.close()
            raise Exception("Agent already running on port %s" % port)
        except TTransport.TTransportException:
            pass

        proc = subprocess.Popen(arg_list)
        self.agent_procs.append(proc)

        def wait(process):
            if process:
                try:
                    os.waitpid(process.pid, os.WUNTRACED)
                except OSError:
                    # Process might already exit
                    pass
        threading.Thread(target=wait, args=(proc,)).start()

        # Back off on failure to connect to agent
        max_sleep_time = 5
        sleep_time = 0.1
        while sleep_time < max_sleep_time:
            try:
                agent_client.connect()
                control_client.connect()
                return (proc, agent_client, control_client)
            except TTransport.TTransportException:
                time.sleep(sleep_time)
                sleep_time *= 2
        return (None, None, None)

    def stop_agent(self, agent_proc):
        if not agent_proc:
            return
        try:
            agent_proc.kill()
            agent_proc.wait()
        except OSError:
            # Doesn't matter
            pass

    def get_default_agent_config(self):
        """
        Get the default agent configuration.

        This method returns a dict of options, where the keys are option names
        and the values are option parameters. If the option doesn't take any
        parameters, the value is set to None.

        Use this method to get an agent config to pass to start_agent.
        """
        host_id = str(uuid.uuid4())
        config_path = os.path.join(self.test_dir, "agent-conf", host_id)
        log_file = os.path.join(self.test_dir, "%s.log" % host_id)
        return {
            "--hostname": "localhost",
            "--port": "8835",
            "--host-id": host_id,
            "--stats-enabled": "True",
            "--stats-store-endpoint": "10.1.1.20",
            "--stats-store-port": "8081",
            "--stats-host-tags": "CLOUD,MGMT",
            "--hypervisor": "fake",
            "--logging-level": "debug",
            "--no-syslog": None,
            "--vm-network": "VM Network",
            "--heartbeat-interval-sec": "3",
            "--heartbeat-timeout-factor": "6",
            "--config-path": config_path,
            "--datastores": "ds1",
            "--logging-file": log_file,
        }
