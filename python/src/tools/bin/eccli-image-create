#!/usr/bin/env python
# Copyright (c) 2015 VMware, Inc. All Rights Reserved.
import httplib
import socket
import sys
import uuid

import time

import os
import re
from host.hypervisor.esx.vim_client import VimClient
from pyVmomi import vim

from host.hypervisor.esx.vm_config import EsxVmConfigSpec

from eccli.format import print_request, print_result
from eccli.format import print_response
from eccli.optparser import default_parser
from eccli.thrift import get_client

from gen.host.ttypes import FinalizeImageRequest, ServiceTicketRequest, \
    ServiceType, FinalizeImageResultCode, CreateImageRequest

parser = default_parser(usage="eccli-image-create [options]",
                        add_help=True)
parser.add_option("-f", "--file-path",
                  action="store", type="string", dest="file_path",
                  help="image file path")
parser.add_option("-d", "--datastore",
                  action="store", type="string", dest="datastore",
                  help="destination datastore")
(options, args) = parser.parse_args()

if not options.file_path or not options.datastore:
    print >> sys.stderr, "Error: file_path and datastore are required\n"
    parser.print_help()
    exit(1)


def normalize_datastore(vim_client, datastore):
    for ds in vim_client.get_all_datastores():
        if ds.name == datastore and ds.info.url:
            return ds.info.url.rsplit("/", 1)[1]
    return datastore


# create import spec
def create_import_spec(image_id, upload_folder):
    vm_spec = EsxVmConfigSpec(None)
    vm_spec.init_for_import(image_id, upload_folder)
    disk_controller = vim.vm.device.VirtualLsiLogicController(
        key=0,
        sharedBus=vim.vm.device.VirtualSCSIController.Sharing.noSharing,
        busNumber=0,
        unitNumber=-1)
    vm_spec.get_spec().deviceChange.append(vim.vm.device.VirtualDeviceSpec(
                device=disk_controller,
                operation=vim.vm.device.VirtualDeviceSpec.Operation.add))
    disk_backing = vim.vm.device.VirtualDisk.FlatVer2BackingInfo(
        fileName="",
        uuid=str(uuid.uuid4()),
        diskMode=vim.vm.device.VirtualDiskOption.DiskMode.persistent,
        thinProvisioned=True)
    disk_spec = vim.vm.device.VirtualDisk(
        controllerKey=0,
        key=-1,
        unitNumber=-1,
        backing=disk_backing)
    disk_spec.capacityInKB = 1024 * 1024
    vm_spec.get_spec().deviceChange.append(vim.vm.device.VirtualDeviceSpec(
        device=disk_spec,
        fileOperation=vim.vm.device.VirtualDeviceSpec.FileOperation.create,
        operation=vim.vm.device.VirtualDeviceSpec.Operation.add))

    return vim.vm.VmImportSpec(configSpec=vm_spec)


def get_ticket(client, datastore):
    ticket_request = ServiceTicketRequest()
    ticket_request.service_type=ServiceType.VIM
    ticket_request.datastore_name = datastore
    print_request(ticket_request)
    ticket_response = client.get_service_ticket(ticket_request)
    print_response(ticket_response)
    return ticket_response.vim_ticket


def create_image(client, image_id, datastore):
    # create image
    create_request = CreateImageRequest()
    create_request.image_id = image_id
    create_request.datastore = datastore

    print_request(create_request)
    create_response = client.create_image(create_request)
    print_response(create_response)
    return create_response.upload_folder


def wait_for_lease(lease):
    retries = 10
    state = None
    while retries > 0:
        state = lease.state
        if state != vim.HttpNfcLease.State.initializing:
            break
        retries -= 1
        time.sleep(1)

    if retries == 0:
        print("Nfc lease initialization timed out")
        raise Exception()
    if state == vim.HttpNfcLease.State.error:
        print("Fail to initialize nfc lease: %s" % str(lease.error))
        raise Exception()


def split_url(url):
    url_matcher = re.search("^(https?)://(.+?)(/.*)$", url)
    protocol = url_matcher.group(1)
    host = url_matcher.group(2)
    selector = url_matcher.group(3)
    return protocol, host, selector


def upload_file(file_path, upload_url, upload_lease):
    CHUNK_SIZE = 65536
    with open(file_path, "rb") as read_fp:
        file_size = os.stat(file_path).st_size
        protocol, host, selector = split_url(upload_url)
        conn = httplib.HTTPConnection(host)
        conn.putrequest("PUT", selector)
        conn.putheader("Content-Length", file_size)
        conn.putheader("Overwrite", "t")
        conn.endheaders()
        counter = 0
        try:
            while True:
                data = read_fp.read(CHUNK_SIZE)
                if len(data) == 0:
                    break

                conn.send(data)
                counter += 1
                if counter % 1024 == 0:  # every 64MB
                    progress = min(counter // 1024, 99)
                    # renew lease periodically, or it will timeout after 5 minutes.
                    upload_lease.Progress(progress)
                    print_result("Sent %d MB, Progress %d%%." %
                                 (CHUNK_SIZE * counter // (1024 * 1024), progress))
        except socket.error, e:
            raise Exception(str(e))

        resp = conn.getresponse()
        if resp.status != 200 and resp.status != 201:
            print("Upload failed, status: %d, reason: %s." % (
                  resp.status, resp.reason))
            raise Exception(resp.status, resp.reason)


# create image and get upload_folder
print_result("Calling agent to create image")
client = get_client(options.host)
image_id = str(uuid.uuid4())
upload_folder = create_image(client, image_id, options.datastore)

# create service ticket
print_result("Calling agent to get ticket")
ticket = get_ticket(client, options.datastore)
# create vim_client using ticket
print_result("Connecting nfc")
vim_client = VimClient(host=options.host, ticket=ticket, auto_sync=False)
# create import spec
print_result("Importing VApp")
importSpec = create_import_spec(image_id, upload_folder)
# importVApp and get upload url
vm_folder = vim_client._vm_folder()
root_rp = vim_client._root_resource_pool()
upload_lease = root_rp.ImportVApp(importSpec, vm_folder)
wait_for_lease(upload_lease)
upload_url = upload_lease.info.deviceUrl[0].url.replace("*", options.host)

# upload file
print_result("Uploading")
try:
    upload_file(options.file_path, upload_url, upload_lease)
finally:
    upload_lease.Complete()

# unregister vm
print_result("Unregistering vm")
vim_client.unregister_vm(image_id)

# finalize image
print_result("Calling agent to finalize image")
finalize_request = FinalizeImageRequest()
finalize_request.image_id = image_id
finalize_request.datastore = options.datastore
finalize_request.tmp_image_path = upload_folder
print_request(finalize_request)
finalize_response = client.finalize_image(finalize_request)
print_response(finalize_response)

if finalize_response.result == FinalizeImageResultCode.OK:
    print_result("image id: %s" % image_id)
