#!/usr/bin/env python
# Copyright (c) 2013 VMware, Inc. All Rights Reserved.

import optparse
import logging
import sys

import kazoo.client
import kazoo.exceptions

import common.log
import common.photon_thrift.address

from gen.host.ttypes import HostConfig
from gen.roles.ttypes import Roles
from thrift.TSerialization import deserialize

parser = optparse.OptionParser("Usage: zlookup [options] [service...]")
parser.add_option("-z", "--zookeeper", default="localhost:2181",
                  action="store", type="string", dest="zookeeper")
parser.add_option("-n", "--namespace", default=None, action="store",
                  type="string", dest="namespace")
(options, args) = parser.parse_args()

stream_handler = logging.StreamHandler()
stream_handler.setFormatter(logging.Formatter(common.log.PLAIN_LOG_FORMAT))

logger = logging.getLogger()
logger.setLevel(logging.WARN)
logger.addHandler(stream_handler)

logging.getLogger("common.zookeeper").setLevel(logging.DEBUG)

if options.namespace:
    SERVICES_PREFIX = "/" + args.namespace.lstrip("/") + "/services"
    HOST_PREFIX = "/" + args.namespace.lstrip("/") + "/hosts"
    MISSING_PREFIX = "/" + args.namespace.lstrip("/") + "/missing"
    ROLES_PREFIX = "/" + args.namespace.lstrip("/") + "/roles"
else:
    SERVICES_PREFIX = "/services"
    HOST_PREFIX = "/hosts"
    MISSING_PREFIX = "/missing"
    ROLES_PREFIX = "/roles"


def indent(level=1):
    return " " * (4 * level)


def decode_server_address(value):
    (host, port) = common.photon_thrift.address.parse_address(value)
    return "%s:%s" % (host, port)


def lookup_all_services(zk):
    services = zk.get_children(SERVICES_PREFIX)

    for service in services:
        lookup_service(zk, service)


def lookup_service(zk, name, depth=0):
    path = service_path(name)

    def printd(s):
        print(" " * 4 * depth + s)

    try:
        nodes = zk.get_children(path)
    except kazoo.exceptions.NoNodeError:
        printd("Service '%s' not found" % name)
        sys.exit(1)

    if len(nodes) == 0:
        return

    printd("%s" % name)
    for node_name in nodes:
        node_path = path + "/" + node_name

        (value, stat) = zk.get(node_path)
        if value:
            printd(" " * 4 + "%s" % decode_server_address(value))
        else:
            lookup_service(zk, name + "/" + node_name, depth + 1)


def lookup_host(zk, host_id):
    path = HOST_PREFIX + "/" + host_id
    (value, stat) = zk.get(path)
    host_config = HostConfig()
    deserialize(host_config, value)

    print "host %s %s:%s" % (host_id, host_config.address.host,
                             host_config.address.port)
    print " " * 4 + ",".join([ds.id for ds in host_config.datastores])


def lookup_hosts(zk):
    hosts = zk.get_children(HOST_PREFIX)
    for host in hosts:
        lookup_host(zk, host)


def lookup_missing(zk):
    print "Missing nodes"
    missing_nodes = zk.get_children(MISSING_PREFIX)
    print "\n".join(missing_nodes)


def lookup_role(zk, role_id):
    path = "%s/%s" % (ROLES_PREFIX, role_id)
    (value, stat) = zk.get(path)
    roles = Roles()
    deserialize(roles, value)

    if not roles.schedulers:
        return

    print "roles for host" + " " + role_id
    for ind in xrange(len(roles.schedulers)):
        sch = roles.schedulers[ind]
        print indent(), "Role #%d:" % (ind + 1)
        print indent(2), "Id:", sch.id
        print indent(2), "Parent:", sch.parent_id
        print indent(2), "Child Schedulers:"
        for childSch in (sch.schedulers or []):
            print indent(3), childSch

        print indent(2), "Child Hosts:"
        for childHost in (sch.hosts or []):
            print indent(3), childHost


def lookup_roles(zk):
    roles = zk.get_children(ROLES_PREFIX)
    for role in roles:
        lookup_role(zk, role)


def service_path(service_name):
    return SERVICES_PREFIX + "/" + service_name


try:
    zk = kazoo.client.KazooClient(hosts=options.zookeeper, read_only=True)
    zk.start()

    if zk.exists(SERVICES_PREFIX):
        if args:
            for service in args:
                lookup_service(zk, service)
        else:
            lookup_all_services(zk)
    else:
        print "Path '%s' doesn't exist skipping" % SERVICES_PREFIX

    if zk.exists(HOST_PREFIX):
        lookup_hosts(zk)
    else:
        print "Path '%s' doesn't exist skipping" % HOST_PREFIX

    if zk.exists(MISSING_PREFIX):
        lookup_missing(zk)
    else:
        print "Path '%s' doesn't exist skipping" % MISSING_PREFIX

    if zk.exists(ROLES_PREFIX):
        lookup_roles(zk)
    else:
        print "Path '%s' doesn't exist skipping" % ROLES_PREFIX

except KeyboardInterrupt:
    sys.exit(1)
