apply plugin: 'application'


import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.vagrant.tasks.VagrantSsh

mainClassName = 'com.vmware.photon.controller.api.frontend.ApiFeService'

dependencies {
  compile(project(':api:model'))
  compile(project(':utils:common'))
  compile(project(':utils:common-auth'))
  compile(project(':utils:common-xenon'))
  compile(project(':cloud-store'))
  compile(project(':api:api-backend'))
  compile(project(':swagger-ui'))
  compile(project(':swagger-jersey'))
  compile(project(':nfc-client'))
  compile(project(':cluster-manager:service-documents'))
  compile(project(':deployer'))
  compile(project(':storage:housekeeper'))
  compile(project(':compute:scheduler'))

  compile "com.google.inject.extensions:guice-assistedinject:${versions.guice}"
  compile "com.google.inject:guice:${versions.guice}"
  compile "com.hubspot.dropwizard:dropwizard-guice:0.8.2.0"
  compile 'com.h2database:h2:1.3.170'
  compile "io.dropwizard:dropwizard-core:${versions.dropwizard}"
  compile "io.dropwizard:dropwizard-hibernate:${versions.dropwizard}"
  compile "io.dropwizard:dropwizard-assets:${versions.dropwizard}"

  compile "org.glassfish.jersey.media:jersey-media-multipart:${versions.jersey_multipart}"
  compile 'ma.glasnost.orika:orika-core:1.4.1'
  compile 'joda-time:joda-time:2.2'
  compile 'org.apache.commons:commons-lang3:3.1'
  compile 'commons-fileupload:commons-fileupload:1.3.2'
  compile 'commons-io:commons-io:2.4'
  compile 'org.postgresql:postgresql:9.2-1003-jdbc4'

  testCompile(project(path: ':utils:common-tests'))
  testCompile(project(path: ':api:model', configuration: 'tests'))
  testCompile(project(path: ':api:api-backend', configuration: 'tests'))

  testCompile("org.apache.curator:curator-test:${versions.curator}") {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    exclude group: 'log4j', module: 'log4j'
    exclude group: 'io.netty', module: 'netty'
  }

  testCompile "io.dropwizard:dropwizard-client:${versions.dropwizard}"
  testCompile "io.dropwizard:dropwizard-testing:${versions.dropwizard}"
  testCompile 'org.hamcrest:hamcrest-all:1.3'
  testCompile 'org.testng:testng:6.8'
  testCompile "org.mockito:mockito-core:${versions.mockito}"
  testCompile("org.powermock:powermock-api-mockito:${versions.powermock}") {
    exclude group: 'org.mockito', module: 'mockito-all'
  }
  testCompile "org.powermock:powermock-module-testng:${versions.powermock}"
  testCompile 'uk.co.datumedge:hamcrest-json:0.2'
}

ext.sharedManifest = manifest {
  attributes 'Specification-Title': 'Photon Controller Management API Frontend',
          'Specification-Version': base_version,
          'Implementation-Version': full_version,
          'Built-By': System.getProperty('user.name'),
          'Built-Date': build_timestamp,
          'Built-JDK': System.getProperty('java.version'),
          'Built-Gradle': gradle.gradleVersion,
          'Git-Commit': git_commit
}

jar {
  manifest = project.manifest {
    from sharedManifest
  }
  into("META-INF/maven/$project.group/$project.name") {
      from "$buildDir/pom.xml"
      rename ".*", "pom.xml"
  }
}

task fatJar(type: Jar) {
  manifest = project.manifest {
    from sharedManifest
  }
  baseName = project.name + '-with-dependencies'
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  with jar
}

test {
  useTestNG() {
    excludeGroups 'flaky'
  }
}

distTar << extractRelease(this, 'frontend')

task dockerfile(type: Dockerfile) {
  dependsOn distTar
  destFile = file('build/container/Dockerfile')
  from 'photon/servicebase'
  copyFile('release/', '/usr/lib/esxcloud/management-api/')
}

task container(type: DockerBuildImage) {
  dependsOn dockerfile, ':containers:servicebase'
  inputDir = dockerfile.destFile.parentFile
  tag = 'photon/management-api'
}

task removeContainer(type: DockerRemoveImage) {
  targetImageId { container.tag }
}

task start(type: VagrantSsh) {
  mustRunAfter container
  description = "Start management-api inside devbox"
  boxDir = devboxDir
  sshCommand = "start-management-api 2>&1 | tee -a start-management-api.log"
}
