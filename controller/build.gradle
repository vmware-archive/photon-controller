apply plugin: 'idea'
apply from: 'buildSrc/src/main/groovy/com/vmware/photon/controller/gradle/utils.gradle'

ext {
  // We get the base version (e.g. 1.1.0) from the VERSION file at the
  // root of our repository.
  //
  // We do not get it from the branch name so that the 'develop' and
  // 'master' branches have a meaningful version that can be used in a
  // JAR file's Specification-Version, which must only be numeric.
  base_version = "head -1 ${rootDir}/../VERSION".execute().text.trim()

  // The short git commit hash
  git_commit = 'git rev-parse --short HEAD'.execute().text.trim()

  // The full version is the base version plus the short git hash
  full_version = base_version + "-" + git_commit

  // The name of the branch: develop, 1.1, etc.
  branch = 'git rev-parse --abbrev-ref HEAD'.execute().text

  // Build timestamp
  // We don't use the handy -I option because it's not available on
  // the Mac version of 'date'
  build_timestamp = 'date -u +"%Y-%m-%dT%H:%M:%SZ"'.execute().text.trim()

  versions = [
      curator            : '2.6.0',
      dropwizard         : '0.8.2',
      guava              : '16.0.1',
      guice              : '4.0',
      hibernate_validator: '5.2.0.Final',
      jackson_core       : '2.5.1',
      metrics            : '3.1.1',
      swagger_core       : '1.3.0',
      swagger_jaxrs      : '1.3.0-SNAPSHOT',
      jersey_multipart   : '2.19',
      powermock          : '1.6.2',
      mockito            : '1.10.17',
      commons_lang3      : '3.1',
      commons_math3      : '3.5',
      commons_io         : '2.4',
      commons_net        : '3.5',
      xenon_common       : '1.1.0-CR3',
      testng             : '6.8',
      hamcrest           : '1.3',
      http_client        : '4.3.3',
      http_async_client  : '4.0.1',
      http_core          : '4.4.4',
      javax_validation   : '1.1.0.Final',
  ]
}

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'http://dl.bintray.com/vermeulen-mp/gradle-plugins' }
  }
  dependencies {
    classpath 'com.bmuschko:gradle-docker-plugin:2.6.2'
    classpath 'com.wiredforcode:gradle-spawn-plugin:0.6.0'
    classpath 'com.bmuschko:gradle-vagrant-plugin:2.0'
  }
}

subprojects {
  apply plugin: 'checkstyle'
  apply plugin: 'idea'
  apply plugin: 'java'
  apply plugin: 'findbugs'
  apply plugin: 'maven'
  apply plugin: 'com.bmuschko.docker-remote-api'
  apply plugin: 'com.bmuschko.vagrant-base'

  version = base_version

  def requiredJavaVersion = JavaVersion.VERSION_1_8;
  sourceCompatibility = requiredJavaVersion
  targetCompatibility = requiredJavaVersion
  uploadArchives.enabled = false

  buildscript {
    repositories {
      mavenLocal()
      mavenCentral()
      jcenter()
    }
    dependencies {
      classpath 'com.bmuschko:gradle-docker-plugin:2.6.1'
    }
  }

  docker {
    url = dockerUrl()
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "http://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
      url "http://dl.bintray.com/vmware/lightwave-maven"
    }
  }

  checkstyle {
    toolVersion = "6.7"
    configFile = new File(rootDir, "config/checkstyle/checkstyle.xml")
    configProperties = ['checkstyle.suppressions.file': new File(rootDir, "config/checkstyle/suppressions.xml"),
                        'checkstyle.header.file'      : new File(rootDir, "config/checkstyle/copy-right-java.header")]
  }

  findbugs {
      toolVersion = "3.0.1"
      reportsDir = file("$project.buildDir/findbugsReports")
      effort = "min"
      reportLevel = "high"
      ignoreFailures = true
      excludeFilter = file("$rootProject.projectDir/config/findbugs/exclude.xml")
  }

  // Exclude findbugs on all generated folders.
  tasks.withType(FindBugs) {
    exclude '**/gen/*'
    exclude '**/echo/*'
    classes = classes.filter {
        !it.path.contains(new File("/gen/").path)
        }
    classes = classes.filter {
        !it.path.contains(new File("/echo/").path)
    }
  }

  idea {
    module {
      // Exclude everything from build, except generated sources.
      excludeDirs -= file('build')
      excludeDirs += file('build/classes')
      excludeDirs += file('build/dependency-cache')
      excludeDirs += file('build/libs')
      excludeDirs += file('build/reports')
      excludeDirs += file('build/resources')
      excludeDirs += file('build/test-results')
      excludeDirs += file('build/tmp')

      sourceDirs += file('build/generated-sources/main')
    }
  }

  task checkJavaVersion << {
    def installedJavaVersion = JavaVersion.current();
    if (installedJavaVersion != requiredJavaVersion) {
      throw new IllegalStateException(
          "Unsupported Java version; required is $requiredJavaVersion, but found $installedJavaVersion");
    }
  }

  task createPom << {
    pom {
      project {
        version = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim() + "-SNAPSHOT"
        inceptionYear '2015'
        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
          }
        }
      }
    }.writeTo("$buildDir/pom.xml")
  }

  task allDeps(type: DependencyReportTask) {}

  compileJava.dependsOn(checkJavaVersion);
  compileJava.dependsOn(createPom);

  test {
    useTestNG()
    testLogging.events "failed", "passed"
    jvmArgs '-noverify'
  }
}

task javadoc(type: Javadoc) {
  source subprojects.collect { project -> project.sourceSets.main.allJava }
  destinationDir = new File(buildDir, 'javadoc')
  classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
}

idea {
  project {
    jdkName = '1.8'
    languageLevel = '1.8'
  }
}

task rpm(type: Exec, dependsOn: ['photon-controller-core:clean', 'photon-controller-core:distTar']) {
  workingDir '../artifacts'
  commandLine './create-rpm.sh'
}

ext.gitRoot = "git rev-parse --show-toplevel".execute().text.trim()
ext.devboxDir = file("${gitRoot}/devbox")
