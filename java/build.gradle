apply plugin: 'idea'

ext {
  versions = [
      curator     : '3.0.0',
      dropwizard  : '0.8.2',
      guava       : '16.0.1',
      guice       : '4.0',
      hibernate_validator: '5.1.3.Final',
      jackson_core: '2.5.1',
      metrics     : '3.1.1',
      swagger_core: '1.3.0',
      swagger_jaxrs: '1.3.0-SNAPSHOT',
      jersey_multipart: '2.19',
      powermock   : '1.6.2',
      mockito     : '1.10.17',
      commons_lang3: '3.1',
      commons_math3: '3.5',
      xenon_common: '0.3.2',
  ]
}

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
  }
}

subprojects {
  apply plugin: 'checkstyle'
  apply plugin: 'idea'
  apply plugin: 'java'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8
  uploadArchives.enabled = false

  buildscript {
    repositories {
      mavenLocal()
      mavenCentral()
    }
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "http://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
      url "http://dl.bintray.com/vmware/lightwave-maven"
    }
  }

  checkstyle {
    toolVersion = "6.7"
    configFile = new File(rootDir, "config/checkstyle/checkstyle.xml")
    configProperties = ['checkstyle.suppressions.file': new File(rootDir, "config/checkstyle/suppressions.xml"),
                        'checkstyle.header.file': new File(rootDir, "config/checkstyle/copy-right-java.header")]
  }

  idea {
    module {
      // Exclude everything from build, except generated sources.
      excludeDirs -= file('build')
      excludeDirs += file('build/classes')
      excludeDirs += file('build/dependency-cache')
      excludeDirs += file('build/libs')
      excludeDirs += file('build/reports')
      excludeDirs += file('build/resources')
      excludeDirs += file('build/test-results')
      excludeDirs += file('build/tmp')

      sourceDirs += file('build/generated-sources/main')
    }
  }

  test {
    useTestNG()
    testLogging.events "failed", "passed"
//    jvmArgs '-XX:-UseSplitVerifier'
    jvmArgs '-noverify'
  }
}

configure([project(":photon-model"), project(":photon-model-tasks")]) {
  apply plugin: 'signing'
  apply plugin: 'maven'

  group = 'com.vmware.photon.controller'

  ext {
    version '0.2.2-SNAPSHOT'
  }
  signing {
    def hasRequiredSigningProps = project.hasProperty('signing.keyId') &&
        project.hasProperty('signing.password') &&
        project.hasProperty('signing.secretKeyRingFile')

    required = !version.endsWith('SNAPSHOT') && hasRequiredSigningProps
    sign configurations.archives
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
          name 'Photon Controller'
          packaging 'jar'
          description 'Photon Controller is an open-source system for managing hardware, containers, ' +
              'and clusters at scale'
          url 'https://github.com/vmware/photon-controller'
          scm {
            connection 'scm:git@github.com:vmware/photon-controller.git'
            developerConnection 'git@github.com:vmware/photon-controller.git'
            url 'https://github.com/vmware/photon-controller'
          }
          licenses {
            license {
              name 'License'
              url 'https://github.com/vmware/photon-controller/blob/master/LICENSE.txt'
            }
            license {
              name 'Notice '
              url 'https://github.com/vmware/photon-controller/blob/master/Notice.txt'
            }
          }
          developers {
            developer {
              id 'jaked@vmware.com'
              name 'Jake Dsouza'
              email 'jaked@vmware.com'
            }
          }
        }
      }
    }
  }
}

task javadoc(type: Javadoc) {
  source subprojects.collect { project -> project.sourceSets.main.allJava }
  destinationDir = new File(buildDir, 'javadoc')
  classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
}

idea {
  project {
    jdkName = '1.8'
    languageLevel = '1.8'
  }
}
