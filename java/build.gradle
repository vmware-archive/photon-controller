apply plugin: 'idea'

ext {
  versions = [
      curator         : '2.6.0',
      dropwizard      : '0.8.2',
      guava           : '16.0.1',
      guice           : '4.0',
      hibernate_validator: '5.1.3.Final',
      jackson_core    : '2.5.1',
      metrics         : '3.1.1',
      swagger_core    : '1.3.0',
      swagger_jaxrs   : '1.3.0-SNAPSHOT',
      jersey_multipart: '2.19',
      powermock       : '1.6.2',
      mockito         : '1.10.17',
      commons_lang3   : '3.1',
      commons_math3   : '3.5',
      xenon_common    : '0.7.5',
      testng          : '6.8',
      hamcrest        : '1.3',
  ]
}

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
  }
}

subprojects {
  apply plugin: 'checkstyle'
  apply plugin: 'idea'
  apply plugin: 'java'

  def requiredJavaVersion = JavaVersion.VERSION_1_8;
  sourceCompatibility = requiredJavaVersion
  targetCompatibility = requiredJavaVersion
  uploadArchives.enabled = false

  buildscript {
    repositories {
      mavenLocal()
      mavenCentral()
    }
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "http://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
      url "http://dl.bintray.com/vmware/lightwave-maven"
    }
  }

  checkstyle {
    toolVersion = "6.7"
    configFile = new File(rootDir, "config/checkstyle/checkstyle.xml")
    configProperties = ['checkstyle.suppressions.file': new File(rootDir, "config/checkstyle/suppressions.xml"),
                        'checkstyle.header.file': new File(rootDir, "config/checkstyle/copy-right-java.header")]
  }

  idea {
    module {
      // Exclude everything from build, except generated sources.
      excludeDirs -= file('build')
      excludeDirs += file('build/classes')
      excludeDirs += file('build/dependency-cache')
      excludeDirs += file('build/libs')
      excludeDirs += file('build/reports')
      excludeDirs += file('build/resources')
      excludeDirs += file('build/test-results')
      excludeDirs += file('build/tmp')

      sourceDirs += file('build/generated-sources/main')
    }
  }

  task checkJavaVersion << {
    def installedJavaVersion = JavaVersion.current();
    if (installedJavaVersion != requiredJavaVersion)
      throw new IllegalStateException("Unsupported Java version; required is " + requiredJavaVersion
          + ", but found " + installedJavaVersion);
  }

  compileJava.dependsOn(checkJavaVersion);

  test {
    useTestNG()
    testLogging.events "failed", "passed"
//    jvmArgs '-XX:-UseSplitVerifier'
    jvmArgs '-noverify'
  }
}

task javadoc(type: Javadoc) {
  source subprojects.collect { project -> project.sourceSets.main.allJava }
  destinationDir = new File(buildDir, 'javadoc')
  classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
}

idea {
  project {
    jdkName = '1.8'
    languageLevel = '1.8'
  }
}
