apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.vagrant.tasks.VagrantSsh

mainClassName = 'com.vmware.photon.controller.cloudstore.Main'

dependencies {
  compile project(':common')
  compile project(':common-dcp')
  compile project(':api')

  compile "org.apache.commons:commons-lang3:${versions.commons_lang3}"
  compile 'net.sourceforge.argparse4j:argparse4j:0.4.0'

  testCompile 'org.hamcrest:hamcrest-all:1.3'
  testCompile 'org.hamcrest:hamcrest-core:1.3'
  testCompile 'junit:junit:4.12'
  testCompile 'org.testng:testng:6.8'
  testCompile "org.mockito:mockito-core:${versions.mockito}"
  testCompile 'joda-time:joda-time:2.2'
}

jar {
  manifest {
    attributes 'Specification-Title': 'Photon Controller Cloud Store',
        'Specification-Version': version,
        'Built-By': System.getProperty('user.name'),
        'Built-Date': new Date(),
        'Built-JDK': System.getProperty('java.version'),
        'Built-Gradle': gradle.gradleVersion,
        'Git-Commit': "git rev-parse --short HEAD".execute().text.trim()
  }
}

tasks.withType(Test) {
  scanForTestClasses = false
  include "**/*Test.class"
  exclude "**/helpers/*.class"
}

task testJar(type: Jar, dependsOn: testClasses) {
  baseName = "test-${project.archivesBaseName}"
  from sourceSets.test.output
}

configurations {
  tests
}

artifacts {
  tests testJar
}

test {
  useTestNG() {
    excludeGroups 'flaky'
  }
}

distTar << extractRelease(this, 'cloud-store')

task dockerfile(type: Dockerfile) {
  dependsOn distTar
  destFile = file('build/container/Dockerfile')
  from 'photon/servicebase'
  copyFile('release/', '/usr/lib/esxcloud/cloud-store/')
}

task container(type: DockerBuildImage) {
  dependsOn dockerfile, ':containers:servicebase'
  inputDir = dockerfile.destFile.parentFile
  tag = 'photon/cloud-store'
}

task removeContainer(type: DockerRemoveImage) {
  targetImageId { container.tag }
}

task start(type: VagrantSsh) {
  mustRunAfter container
  description = "Start ${project.name} inside devbox"
  boxDir = devboxDir
  sshCommand = "start-${project.name} 2>&1 | tee -a start-${project.name}.log"
}
