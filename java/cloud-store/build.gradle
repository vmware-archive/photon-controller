apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.vagrant.tasks.VagrantSsh

mainClassName = 'com.vmware.photon.controller.cloudstore.Main'

dependencies {
  compile project(':common')
  compile project(':common-xenon')
  compile project(':api:model')

  compile "org.apache.commons:commons-lang3:${versions.commons_lang3}"
  compile "commons-net:commons-net:${versions.commons_net}"
  compile 'net.sourceforge.argparse4j:argparse4j:0.4.0'

  testCompile 'org.hamcrest:hamcrest-all:1.3'
  testCompile 'org.hamcrest:hamcrest-core:1.3'
  testCompile 'junit:junit:4.12'
  testCompile 'org.testng:testng:6.8'
  testCompile "org.mockito:mockito-core:${versions.mockito}"
  testCompile 'joda-time:joda-time:2.2'
}

ext.sharedManifest = manifest {
  attributes 'Specification-Title': 'Photon Controller Cloud Store',
          'Specification-Version': base_version,
          'Implementation-Version': full_version,
          'Built-By': System.getProperty('user.name'),
          'Built-Date': build_timestamp,
          'Built-JDK': System.getProperty('java.version'),
          'Built-Gradle': gradle.gradleVersion,
          'Git-Commit': git_commit
}

jar {
  manifest = project.manifest {
    from sharedManifest
  }
  into("META-INF/maven/$project.group/$project.name") {
      from "$buildDir/pom.xml"
      rename ".*", "pom.xml"
  }
}

task fatJar(type: Jar) {
  manifest = project.manifest {
    from sharedManifest
  }
  baseName = project.name + '-with-dependencies'
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  with jar
}

tasks.withType(Test) {
  scanForTestClasses = false
  include "**/*Test.class"
  exclude "**/helpers/*.class"
}

task testJar(type: Jar, dependsOn: testClasses) {
  baseName = "test-${project.archivesBaseName}"
  from sourceSets.test.output
}

configurations {
  tests
}

artifacts {
  tests testJar
}

test {
  useTestNG() {
    excludeGroups 'flaky'
  }
}

distTar << extractRelease(this, 'cloud-store')
