apply plugin: 'java'

uploadArchives.enabled = true

dependencies {
  compile "commons-io:commons-io:2.4"
  compile "com.vmware.xenon:xenon-common:${versions.xenon_common}"
  compile 'commons-validator:commons-validator:1.4.0'
  compile 'com.jcraft:jsch:0.1.53'
  compile(project(':photon-model'))

  testCompile("org.apache.curator:curator-test:${versions.curator}") {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    exclude group: 'log4j', module: 'log4j'
  }

  testCompile 'org.hamcrest:hamcrest-all:1.3'
  testCompile 'org.testng:testng:6.8'
  testCompile "org.mockito:mockito-core:${versions.mockito}"
  testCompile("org.powermock:powermock-api-mockito:${versions.powermock}") {
    exclude group: 'org.mockito', module: 'mockito-all'
  }
  testCompile "org.powermock:powermock-module-testng:${versions.powermock}"
  testCompile "com.vmware.xenon:xenon-common:${versions.xenon_common}:tests"
  testCompile(project(path: ':photon-model', configuration: 'tests'))
}

jar {
  baseName = 'photon-model-tasks'
  manifest {
    attributes 'Specification-Title': 'Tasks associated with Photon Model',
        'Specification-Version': version,
        'Built-By': System.getProperty('user.name'),
        'Built-Date': new Date(),
        'Built-JDK': System.getProperty('java.version'),
        'Built-Gradle': gradle.gradleVersion,
        'Git-Commit': "git rev-parse --short HEAD".execute().text.trim()
  }
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

tasks.withType(Test) {
  scanForTestClasses = false
  include "**/*Test.class"
  exclude "**/helpers/*.class"
}

artifacts {
  archives javadocJar, sourcesJar
}
