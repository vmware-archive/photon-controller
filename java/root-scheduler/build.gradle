apply plugin: 'application'
apply plugin: 'thrift'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.vagrant.tasks.VagrantSsh

mainClassName = 'com.vmware.photon.controller.rootscheduler.Main'

dependencies {
  compile project(':cloud-store')
  compile project(':common')
  compile project(':common-xenon')
  compile project(':common-logging')

  compile "com.google.guava:guava:${versions.guava}"
  compile 'net.sourceforge.argparse4j:argparse4j:0.4.0'

  thrift files('../../thrift/host.thrift',
               '../../thrift/roles.thrift',
               '../../thrift/resource.thrift',
               '../../thrift/scheduler.thrift',
               '../../thrift/flavors.thrift',
               '../../thrift/tracing.thrift',
               '../../thrift/status.thrift')

  testCompile(project(path: ':cloud-store', configuration: 'tests'))
  testCompile "org.apache.commons:commons-math3:${versions.commons_math3}"
  testCompile 'org.hamcrest:hamcrest-all:1.3'
  testCompile 'org.testng:testng:6.8'
  testCompile "org.mockito:mockito-core:${versions.mockito}"
  testCompile("org.powermock:powermock-api-mockito:${versions.powermock}") {
    exclude group: 'org.mockito', module: 'mockito-all'
  }
  testCompile "org.powermock:powermock-module-testng:${versions.powermock}"
  testCompile 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'

}

ext.sharedManifest = manifest {
  attributes 'Specification-Title': 'Photon Controller Root Scheduler',
          'Specification-Version': version,
          'Built-By': System.getProperty('user.name'),
          'Built-Date': new Date(),
          'Built-JDK': System.getProperty('java.version'),
          'Built-Gradle': gradle.gradleVersion,
          'Git-Commit': "git rev-parse --short HEAD".execute().text.trim()
}

jar {
  manifest = project.manifest {
    from sharedManifest
  }
  into("META-INF/maven/$project.group/$project.name") {
      from "$buildDir/pom.xml"
      rename ".*", "pom.xml"
  }
}

task fatJar(type: Jar) {
  manifest = project.manifest {
    from sharedManifest
  }
  baseName = project.name + '-with-dependencies'
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  with jar
}

run {
  if (project.hasProperty("appArgs")) {
    args Eval.me(appArgs)
  }
}

distTar << extractRelease(this, 'root-scheduler')
