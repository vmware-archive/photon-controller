#!/bin/bash

tools=$(readlink -nf $(dirname $0))
source $tools/common.sh

function usage() {
  echo "Usage: $0 HOST_ADDRESS USERNAME PASSWORD VIB_PATH" 1>&2
  echo
  echo "Supplied args:"
  echo $*
  exit 1
}

host_address=""
username=""
password=""
vib_path=""
create_cert=""
lightwave_domain=""
lightwave_address=""
lightwave_password=""

if [ "$#" -lt 4 ]
then
  usage $*
fi

host_address=$1
shift
username=$1
shift
password=$1
shift
vib_path=$1
shift
create_cert=$1
shift
lightwave_domain=$1
shift
lightwave_address=$1
shift
lightwave_password=$1
shift



while getopts d:l:n:h flag
do
  case $flag in
    ?)
      usage $*
      ;;
  esac
done

function install_vib() {
  sshpass -p "$password" ssh -o StrictHostKeyChecking=no ${username}@${host_address} esxcli software vib install -f -v $vib_path
  if [[ $? -ne 0 ]]
  then
    echo "retrying installing vib"
	  sshpass -p "$password" ssh -o StrictHostKeyChecking=no ${username}@${host_address} esxcli software vib install -f -v $vib_path

	  if [[ $? -ne 0 ]]
	  then
	    exit 1
	  fi
	fi
}

function create_and_copy_certificate() {
  # Add java home and other required binaries to path. We need this here even though we are doing this during container
  # build because systemd service does not seem to honor the environment variables set at container build time.


  export JAVA_HOME="/usr/java/default"
  export PATH=$PATH:$JAVA_HOME/bin:/opt/esxcli:/opt/vmware/bin:/opt/likewise/bin

  cert_dir="./host_cert_${host_address}"

  if [ ! -d "${cert_dir}" ]; then
    mkdir -p ${cert_dir}

    #copying the config file to local directory which is going to be used in the cerficate generation.
    config_file_path="${cert_dir}/certool.cfg"
    cp /opt/vmware/share/config/certool.cfg "${config_file_path}"

    # Fill in the ip address for generating a host certificate
    sed -i s/IPAddress.*/"IPAddress = ${host_address}"/ "${config_file_path}"

    # Generate keys if they don't exist
    priv_key_path="${cert_dir}/host.privkey"
    pub_key_path="${cert_dir}/host.pubkey"
    if [ ! -f "${priv_key_path}" ] || [ ! -f "${pub_key_path}" ]; then
      certool --genkey --privkey="${priv_key_path}" --pubkey="${pub_key_path}" \
        --srp-upn administrator@${lightwave_domain} --srp-pwd ${lightwave_password} --server ${lightwave_address}
    fi

    # Generate certificate if it doesn't exist
    host_crt_path="${cert_dir}/host.crt"
    if [ ! -f "${host_crt_path}" ]; then
      certool --gencert --privkey="${priv_key_path}" --cert="${host_crt_path}" \
        --srp-upn administrator@${lightwave_domain} --srp-pwd ${lightwave_password} \
        --server ${lightwave_address} --config "${config_file_path}"
    fi

    sshpass -p "$password" scp -o StrictHostKeyChecking=no ${host_crt_path} ${username}@${host_address}:/etc/vmware/ssl
    sshpass -p "$password" scp -o StrictHostKeyChecking=no ${priv_key_path} ${username}@${host_address}:/etc/vmware/ssl

    rm -rf "${cert_dir}"
  fi

}

sshpass -p "$password"  ssh -o StrictHostKeyChecking=no ${username}@${host_address} date
sshpass -p "$password"  ssh -o StrictHostKeyChecking=no ${username}@${host_address} esxcli software vib list

install_vib

sshpass -p "$password"  ssh -o StrictHostKeyChecking=no ${username}@${host_address} esxcli software vib list
sshpass -p "$password"  ssh -o StrictHostKeyChecking=no ${username}@${host_address} date

if [ "$create_cert" == "true" ]
then
  create_and_copy_certificate
fi
