#!/bin/bash
tools=$(readlink -nf $(dirname $0))
source $tools/common.sh

function usage() {
  echo "Usage: $0 HOST_ADDRESS USERNAME PASSWORD VIB_PATH CREATE_CERT LW_DOMAIN LW_ADDRESS LW_PASSWORD" 1>&2
  echo
  echo "Supplied args:"
  echo $*
  exit 1
}

host_address=""
username=""
password=""
vib_path=""
create_cert=""
lightwave_domain=""
lightwave_address=""
lightwave_password=""

if [ "$#" -lt 8 ]
then
  usage $*
fi

host_address=$1
shift
username=$1
shift
password=$1
shift
vib_path=$1
shift
create_cert=$1
shift
lightwave_domain=$1
shift
lightwave_address=$1
shift
lightwave_password=$1
shift


while getopts d:l:n:h flag
do
  case $flag in
    ?)
      usage $*
      ;;
  esac
done

SSH_OPTS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

function install_vib() {
  sshpass -p "$password" ssh $SSH_OPTS ${username}@${host_address} esxcli software vib install -f -v $vib_path
  if [[ $? -ne 0 ]]
  then
    echo "retrying installing vib"
	  sshpass -p "$password" ssh $SSH_OPTS ${username}@${host_address} esxcli software vib install -f -v $vib_path

	  if [[ $? -ne 0 ]]
	  then
	    exit 1
	  fi
	fi
}

# Add java home and other required binaries to path. We need this here even though we are doing this during container
# build because systemd service does not seem to honor the environment variables set at container build time.
export JAVA_HOME="/usr/java/default"
export PATH=$PATH:$JAVA_HOME/bin:/opt/esxcli:/opt/vmware/bin:/opt/likewise/bin

host_cert_dir="/etc/vmware/ssl"
priv_key_name="rui.key"
pub_key_name="rui.pubkey"
crt_name="rui.crt"
pem_name="rui.pem"
esxi_priv_key_path="${host_cert_dir}/${priv_key_name}"
esxi_host_crt_path="${host_cert_dir}/${crt_name}"
esxi_host_pem_path="${host_cert_dir}/${pem_name}"

function join_lightwave_domain() {
  join_domain_cmd = "/usr/lib/vmware/ic-deploy/bin/configure-lightwave.py ${lightwave_address} ${lightwave_domain} ${lightwave_password} 1 ${host_address} $password"
  echo $join_domain_cmd
  sshpass -p "$password" ssh $SSH_OPTS ${username}@${host_address} $join_domain_cmd

  create_pem_cmd = "cat ${esxi_priv_key_path} ${esxi_host_crt_path} > ${esxi_host_pem_path}"
  echo $create_pem_cmd
  sshpass -p "$password" ssh $SSH_OPTS ${username}@${host_address} $create_pem_cmd

  restart_agent_cmd = "if [ -f /etc/init.d/photon-controller-agent ]; then /etc/init.d/photon-controller-agent restart; fi"
  echo $restart_agent_cmd
  sshpass -p "$password" ssh $SSH_OPTS ${username}@${host_address} $restart_agent_cmd
}

function create_and_copy_certificate_no_auth() {
  cert_dir="./host_cert_no_auth_${host_address}"
  priv_key_path="${cert_dir}/${priv_key_name}"
  host_crt_path="${cert_dir}/${crt_name}"
  host_pem_path="${cert_dir}/${pem_name}"

  if [ ! -d "$cert_dir" ]; then
    mkdir -p ${cert_dir}

    echo "Creating cert for ${host_address}"
    openssl req -subj '/CN=photon-controller.com/O=VMware Inc./C=US' -new -newkey rsa:1024 -days 1095 -nodes -x509 -keyout ${priv_key_path} -out ${host_crt_path}
    cat ${host_crt_path} ${priv_key_path} > ${host_pem_path}

    # no need to import into keystore since in the non-auth case we accept any cert
  else
    echo "Use existing certs at ${cert_dir}"
  fi

  # listing /etc/vmware/ssl contents before copying
  echo "listing /etc/vmware/ssl contents before copying"
  sshpass -p "$password" ssh $SSH_OPTS ${username}@${host_address} ls /etc/vmware/ssl

  sshpass -p "$password" scp $SSH_OPTS ${host_crt_path} ${username}@${host_address}:/etc/vmware/ssl
  sshpass -p "$password" scp $SSH_OPTS ${host_pem_path} ${username}@${host_address}:/etc/vmware/ssl
  sshpass -p "$password" scp $SSH_OPTS ${priv_key_path} ${username}@${host_address}:/etc/vmware/ssl

  # listing /etc/vmware/ssl contents after copying
  echo "listing /etc/vmware/ssl contents after copying"
  sshpass -p "$password" ssh $SSH_OPTS ${username}@${host_address} ls /etc/vmware/ssl

  # restart hostd to load new cert
  sshpass -p "$password" ssh $SSH_OPTS ${username}@${host_address} /etc/init.d/hostd restart
}

echo "create_cert=${create_cert}, vib_path=${vib_path}"
if [[ "$vib_path" == *"lightwave"* ]]
then
  if [ "$create_cert" == "true" ]
  then
    join_lightwave_domain
  else
    # this is the cert generated by default through
    create_and_copy_certificate_no_auth
  fi
fi

sshpass -p "$password"  ssh $SSH_OPTS ${username}@${host_address} date
sshpass -p "$password"  ssh $SSH_OPTS ${username}@${host_address} esxcli software vib list

install_vib

sshpass -p "$password"  ssh $SSH_OPTS ${username}@${host_address} esxcli software vib list
sshpass -p "$password"  ssh $SSH_OPTS ${username}@${host_address} date
