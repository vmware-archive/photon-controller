apply plugin: 'application'

mainClassName = 'com.vmware.photon.controller.provisioner.Main'

dependencies {
  compile project(':common')
  compile project(':common-dcp')
  compile project(':common-logging')
  compile project(':common-auth')

  compile "commons-io:commons-io:2.4"
  compile "com.google.guava:guava:${versions.guava}"
  compile "com.google.inject.extensions:guice-assistedinject:${versions.guice}"
  compile "com.google.inject:guice:${versions.guice}"
  compile 'net.sourceforge.argparse4j:argparse4j:0.4.0'
  compile 'com.github.docker-java:docker-java:1.3.0'
  compile 'org.eclipse.jetty:jetty-util:8.1.10.v20130312'
  compile 'commons-net:commons-net:2.0'
  compile 'com.github.spullara.mustache.java:compiler:0.9.0'

  testCompile "com.vmware.xenon:xenon-common:${versions.xenon_common}:tests"
  testCompile 'org.hamcrest:hamcrest-all:1.3'
  testCompile 'org.testng:testng:6.8'
  testCompile 'junit:junit:4.12'
  testCompile "org.mockito:mockito-core:${versions.mockito}"
  testCompile("org.powermock:powermock-api-mockito:${versions.powermock}") {
    exclude group: 'org.mockito', module: 'mockito-all'
  }
  testCompile "org.powermock:powermock-module-testng:${versions.powermock}"
}

jar {
  manifest {
    attributes 'Specification-Title': 'Photon Controller Provisioner',
        'Specification-Version': version,
        'Built-By': System.getProperty('user.name'),
        'Built-Date': new Date(),
        'Built-JDK': System.getProperty('java.version'),
        'Built-Gradle': gradle.gradleVersion,
        'Git-Commit': "git rev-parse --short HEAD".execute().text.trim()
  }
}

tasks.withType(Test) {
  scanForTestClasses = false
  include "**/*Test.class"
  exclude "**/helpers/*.class"
}

//tasks.create(name: 'buildSlingshot', type:Exec) {
//  println 'Building Slingshot'
//
//  workingDir '../../go/bmp-adapters/src/main/go'
//
//  commandLine 'make'
//  standardOutput = new ByteArrayOutputStream()
//  //extension method foo.output() can be used to obtain the output String
//  ext.output = {
//    return standardOutput.toString()
//  }
//}
//
//tasks.create(name: 'copySlingshot', type:Copy, dependsOn:buildSlingshot) {
//  println 'Copying Slingshot binary'
//
//  from('../../go/bmp-adapters/src/main/go/bin') {
//    include 'go-bmp*'
//
//  }
//
//  into 'src/main/resources/bin'
//}
//
//compileJava.dependsOn(buildSlingshot)
//compileJava.dependsOn(copySlingshot)
