apply plugin: 'application'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.vagrant.tasks.VagrantSsh

mainClassName = 'com.vmware.photon.controller.provisioner.Main'

dependencies {
  compile project(':common')
  compile project(':common-dcp')
  compile project(':common-logging')
  compile project(':common-auth')

  compile "commons-io:commons-io:2.4"
  compile "com.google.guava:guava:${versions.guava}"
  compile "com.google.inject.extensions:guice-assistedinject:${versions.guice}"
  compile "com.google.inject:guice:${versions.guice}"
  compile 'net.sourceforge.argparse4j:argparse4j:0.4.0'
  compile 'com.github.docker-java:docker-java:1.3.0'
  compile 'org.eclipse.jetty:jetty-util:8.1.10.v20130312'
  compile 'commons-net:commons-net:2.0'
  compile 'com.github.spullara.mustache.java:compiler:0.9.0'

  testCompile "com.vmware.xenon:xenon-common:${versions.xenon_common}:tests"
  testCompile 'org.hamcrest:hamcrest-all:1.3'
  testCompile 'org.testng:testng:6.8'
  testCompile 'junit:junit:4.12'
  testCompile "org.mockito:mockito-core:${versions.mockito}"
  testCompile("org.powermock:powermock-api-mockito:${versions.powermock}") {
    exclude group: 'org.mockito', module: 'mockito-all'
  }
  testCompile "org.powermock:powermock-module-testng:${versions.powermock}"
}

jar {
  manifest {
    attributes 'Specification-Title': 'Photon Controller Provisioner',
        'Specification-Version': version,
        'Built-By': System.getProperty('user.name'),
        'Built-Date': new Date(),
        'Built-JDK': System.getProperty('java.version'),
        'Built-Gradle': gradle.gradleVersion,
        'Git-Commit': "git rev-parse --short HEAD".execute().text.trim()
  }
}

tasks.withType(Test) {
  scanForTestClasses = false
  include "**/*Test.class"
  exclude "**/helpers/*.class"
}

task buildSlingshot(type: Exec) {
  workingDir '../../go/bmp-adapters/src/main/go'

  executable 'make'
  args 'build'
}

task copySlingshot(type: Copy, dependsOn: buildSlingshot) {
  from('../../go/bmp-adapters/src/main/go/bin') {
    include 'go-bmp*'
  }

  into 'src/main/resources/bin'
}

compileJava.dependsOn(buildSlingshot)
compileJava.dependsOn(copySlingshot)


distTar << extractRelease(this, 'bare-metal-provisioner')

task dockerfile(type: Dockerfile) {
  dependsOn distTar
  destFile = file("build/container/Dockerfile")
  from "photon/servicebase"
  copyFile("release/", "/usr/lib/esxcloud/bare-metal-provisioner/")
}

task container(type: DockerBuildImage) {
  dependsOn dockerfile, ":containers:servicebase"
  inputDir = dockerfile.destFile.parentFile
  tag = "photon/bare-metal-provisioner"
}

task removeContainer(type: DockerRemoveImage) {
  targetImageId { container.tag }
}

task start(type: VagrantSsh) {
  mustRunAfter container
  description = "Start ${project.name} inside devbox"
  boxDir = devboxDir
  sshCommand = "start-${project.name} 2>&1 | tee -a start-${project.name}.log"
}
