#cloud-config
bootcmd:
  - rm -f /etc/systemd/network/*.network
  - systemctl stop systemd-networkd

write_files:
  - content: |
        eno_name=$(ip addr | grep eno | sed 's/.*\(eno.*\):.*/\1/' | head -n 1)
        cat > "/etc/systemd/network/10-dhcp-${eno_name}.network" << EOF
        [Match]
        Name=${eno_name}

        [Network]
        $DNS

        [Address]
        Address=$ADDRESS

        [Route]
        Gateway=$GATEWAY
        EOF
        ip addr flush label "${eno_name}"
        systemctl restart systemd-networkd
        ip=`grep Address= /etc/systemd/network/10-dhcp-${eno_name}.network | sed 's/.*=\.*//' | sed 's/\/.*//'`
        echo ip
        c_ip=`ifconfig ${eno_name} | sed -n '/dr:/{;s/.*dr://;s/ .*//;p;}'`
        while [ "$ip" != "$c_ip" ]
        do
          ip addr flush label "${eno_name}"
          systemctl restart systemd-networkd
          c_ip=`ifconfig ${eno_name} | sed -n '/dr:/{;s/.*dr://;s/ .*//;p;}'`
          echo $c_ip
          sleep 1
        done
        ping -q -c 4 $GATEWAY
    owner: root:root
    permissions: 0644
    path: /tmp/init-network.sh

  - content: |
        eno_name=$(ip addr | grep eno | sed 's/.*\(eno.*\):.*/\1/' | head -n 1)
        ipAddress=`ifconfig ${eno_name} | sed -n '/dr:/{;s/.*dr://;s/ .*//;p;}'`
        sed -i s/hostname.*/"hostname = ${ipAddress}"/ /root/harbor/harbor.cfg
        sed -i s/harbor_admin_password.*/"harbor_admin_password = $ADMIN_PASSWORD"/ /root/harbor/harbor.cfg
        sed -i s/db_password.*/"db_password = $ADMIN_PASSWORD"/ /root/harbor/harbor.cfg
        sed -i s/ui_url_protocol.*/"ui_url_protocol = https"/ /root/harbor/harbor.cfg

        echo "Generating CA certificate"
        openssl req -newkey rsa:4096 -nodes -sha256 \
          -keyout /root/ca.key -x509 -days 365 \
          -out /root/ca.crt \
          -subj "/C=US/ST=California/L=Palo Alto/O=VMware/OU=VMware Engineering/CN=www.pc-harbor.vmware.com"

        echo "Generating certificate signing request"
        openssl req -newkey rsa:4096 -nodes -sha256 \
          -keyout /root/pc-harbor.vmware.com.key \
          -out /root/pc-harbor.vmware.com.csr \
          -subj "/C=US/ST=California/L=Palo Alto/O=VMware/OU=VMware Engineering/CN=www.pc-harbor.vmware.com"

        echo "Generating certificate for the Harbor registry host"
        mkdir -p /root/demoCA
        pushd /root/demoCA
        touch index.txt
        echo '01' > serial
        popd

        echo subjectAltName = IP:${ipAddress} > /root/extfile.cnf
        pushd /root
        openssl ca \
          -batch \
          -in /root/pc-harbor.vmware.com.csr \
          -out /root/pc-harbor.vmware.com.crt \
          -cert /root/ca.crt \
          -keyfile /root/ca.key \
          -extfile /root/extfile.cnf \
          -outdir /root/
        popd

        echo "Configuring Nginx"
        pushd /root/harbor/config/nginx
        mkdir -p cert/
        cp /root/pc-harbor.vmware.com.crt cert/
        cp /root/pc-harbor.vmware.com.key cert/
        mv nginx.conf nginx.conf.bak
        cp nginx.https.conf nginx.conf
        sed -i "s|server_name harbordomain.com|server_name ${ipAddress}|g" nginx.conf
        sed -i "s|harbordomain.crt|pc-harbor.vmware.com.crt|g" nginx.conf
        sed -i "s|harbordomain.key|pc-harbor.vmware.com.key|g" nginx.conf
        popd

        pushd /root/harbor
        echo "Preparing Harbor"
        ./prepare
        echo "Starting Harbor"
        docker-compose up -d
        popd
        echo "done"
    owner: root:root
    permissions: 0644
    path: /tmp/start-harbor.sh

  - content: |
        retry_max="60"
        retry="0"
        while [ "$retry" -lt "$retry_max" ]
        do
          docker version
          if [ "$?" == "0" ]; then
            echo "Docker daemon is up and running!"
            break
          fi
          sleep 1
          retry=`expr $retry + 1`
        done

        if [ "$retry" -eq "$retry_max" ]
        then
          echo "Docker daemon is not up yet!"
        fi
    owner: root:root
    permissions: 0644
    path: /tmp/check-docker.sh

users:
  - name: root
    lock_passwd: false
    ssh-authorized-keys:
      - $SSH_KEY

runcmd:
  - sh /tmp/init-network.sh
  - systemctl enable docker
  - systemctl start docker
  - sh /tmp/check-docker.sh
  - sh /tmp/start-harbor.sh > /var/log/start-harbor.log 2>&1
