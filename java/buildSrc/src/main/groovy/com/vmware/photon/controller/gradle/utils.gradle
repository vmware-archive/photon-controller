// Misc extensions and utils
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.Path
import java.nio.file.FileVisitResult
import java.nio.file.SimpleFileVisitor
import java.nio.file.attribute.BasicFileAttributes
import java.util.regex.Pattern

ext.findFile = { File f, Pattern pattern ->
  if(f == null || !f.exists()) { return null }
  return Files.walk(Paths.get(f.path))
    .filter{it.fileName ==~ pattern && it.toFile().isFile()}
    .findFirst().orElse(null)?.toFile()
}

ext.findDirectory = { File f, Pattern pattern ->
  if(f == null || !f.exists()) { return null }
  return Files.walk(Paths.get(f.path))
    .filter{it.fileName ==~ pattern && it.toFile().isDirectory()}
    .findFirst().orElse(null)?.toFile()
}

ext.deleteRecursive = { File f ->
  if(!f.exists()) return;
  Files.walkFileTree(f.toPath(), new SimpleFileVisitor<Path>() {
    @Override
    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
      Files.delete(file);
      return FileVisitResult.CONTINUE;
    }
    @Override
    public FileVisitResult postVisitDirectory(Path dir, IOException ex) throws IOException {
      Files.delete(dir);
      return FileVisitResult.CONTINUE;
    }
  });
}

// Resolves Docker remote API URL
ext.dockerUrl = {
  def url = System.getenv("DOCKER_URL")
  return url ?: "http://127.0.0.1:2375"
}

// Extract a release tar to build/container/release
ext.extractRelease = { project, name ->
  return {
    def tar = findFile(project.file('build/distributions'), Pattern.compile("$name-.*.tar"))
    def dest = project.file('build/container/')
    copy {
      from project.tarTree(tar)
      into dest
    }
      
    // Rename extracted release directory to make it easy to find from Dockerfile
    def tarOutput = findDirectory(dest, Pattern.compile("$name-.*")).toPath()
    def releaseDir = tarOutput.resolveSibling('release')
    deleteRecursive(releaseDir.toFile())
    Files.move(tarOutput, releaseDir)
  }
}
