apply plugin: 'application'
apply plugin: 'thrift'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.vagrant.tasks.VagrantSsh
import java.nio.file.Files

mainClassName = 'com.vmware.photon.controller.housekeeper.Main'

dependencies {
  compile project(':common')
  compile project(':common-xenon')
  compile project(':common-logging')
  compile project(':cloud-store')
  compile project(':common-tests')
  compile project(':nsx-client')
  compile project(':api-backend')

  compile "com.google.guava:guava:${versions.guava}"
  compile "com.google.inject.extensions:guice-assistedinject:${versions.guice}"
  compile "com.google.inject:guice:${versions.guice}"
  compile 'net.sourceforge.argparse4j:argparse4j:0.4.0'
  compile 'joda-time:joda-time:2.2'

  thrift files(
      '../../thrift/resource.thrift',
      '../../thrift/roles.thrift',
      '../../thrift/flavors.thrift',
      '../../thrift/host.thrift',
      '../../thrift/tracing.thrift',
      '../../thrift/status.thrift')

  testCompile("org.apache.curator:curator-test:${versions.curator}") {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    exclude group: 'log4j', module: 'log4j'
  }

  testCompile 'commons-io:commons-io:2.4'
  testCompile 'org.hamcrest:hamcrest-all:1.3'
  testCompile 'org.testng:testng:6.8'
  testCompile "org.mockito:mockito-core:${versions.mockito}"
  testCompile("org.powermock:powermock-api-mockito:${versions.powermock}") {
    exclude group: 'org.mockito', module: 'mockito-all'
  }
  testCompile "org.powermock:powermock-module-testng:${versions.powermock}"
}

ext.sharedManifest = manifest {
  attributes 'Specification-Title': 'Photon Controller Housekeeper',
          'Specification-Version': version,
          'Built-By': System.getProperty('user.name'),
          'Built-Date': new Date(),
          'Built-JDK': System.getProperty('java.version'),
          'Built-Gradle': gradle.gradleVersion,
          'Git-Commit': "git rev-parse --short HEAD".execute().text.trim()
}

jar {
  manifest = project.manifest {
    from sharedManifest
  }
  into("META-INF/maven/$project.group/$project.name") {
      from "$buildDir/pom.xml"
      rename ".*", "pom.xml"
  }
}

task fatJar(type: Jar) {
  manifest = project.manifest {
    from sharedManifest
  }
  baseName = project.name + '-with-dependencies'
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  with jar
}

tasks.withType(Test) {
  scanForTestClasses = false
  include "**/*Test.class"
  exclude "**/helpers/*.class"
}

distTar << extractRelease(this, 'housekeeper')

task dockerfile(type: Dockerfile) {
  dependsOn distTar
  destFile = file('build/container/Dockerfile')
  from 'photon/servicebase'
  copyFile('release/', '/usr/lib/esxcloud/housekeeper/')
}

task container(type: DockerBuildImage) {
  dependsOn dockerfile, ':containers:servicebase'
  inputDir = dockerfile.destFile.parentFile
  tag = 'photon/housekeeper'
}

task removeContainer(type: DockerRemoveImage) {
  targetImageId { container.tag }
}

task start(type: VagrantSsh) {
  mustRunAfter container
  description = "Start ${project.name} inside devbox"
  boxDir = devboxDir
  sshCommand = "start-${project.name} 2>&1 | tee -a start-${project.name}.log"
}
